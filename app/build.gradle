apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }
    return p.text.trim()
}

android {
    if (new File(System.properties['user.home'], ".signing/reddit-android-appstore/signing.properties").canRead()) {
        def Properties signingProps = new Properties()
        signingProps.load(new FileInputStream(signingPropFile))
        signingConfigs {
            release {
                storeFile new File(signingProps['release.storePath'])
                keyAlias signingProps['release.keyAlias']
                storePassword signingProps['release.storePassword']
                keyPassword signingProps['release.keyPassword']
            }
        }
    }

    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    def versionMajor = 0
    def versionMinor = 7
    def versionPatch = 1
    def versionBuild = 0


    defaultConfig {
        applicationId "subreddit.android.appstore"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            if (System.env.'CI') testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            if (signingConfigs.hasProperty('release')) signingConfig signingConfigs.release
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all { variant ->
            if (variant.buildType.name != "debug") {
                variant.outputs.each { output ->
                    def file = output.outputFile
                    //noinspection GroovyAssignabilityCheck
                    output.outputFile = new File(file.parent, "rAndroid_AppStore-v" + defaultConfig.versionName + "(" + defaultConfig.versionCode + ")-" + variant.buildType.name.toUpperCase() + "-" + gitSha() + ".apk")
                }
            }
        }
    }
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        //noinspection GroovyMissingReturnStatement
        prod {

        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release') && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }

        jacoco {
            includeNoLocationClasses = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testProdDebugUnitTest' , 'createProdDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*Module_*Factory.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/prod/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testProdDebugUnitTest.exec",
            "outputs/code-coverage/connected/flavors/PROD/*coverage.ec"
    ])
}

coveralls {
    sourceDirs = fileTree(dir: "${project.projectDir}/java", excludes: [
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/*Module_*Factory.class'
    ]).flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

tasks.coveralls {
    dependsOn 'connectedAndroidTest', 'test'
    onlyIf { System.env.'CI' }
}

tasks.withType(Test) {
    systemProperty "robolectric.logging", "stdout"
}
ext {
    supportLibVersion = '25.1.0'
}
//noinspection GroovyAssignabilityCheck
configurations.all {
    //noinspection GroovyAssignabilityCheck
    resolutionStrategy.force "com.android.support:recyclerview-v7:${supportLibVersion}"
    resolutionStrategy.force "com.android.support:support-annotations:${supportLibVersion}"
    resolutionStrategy.force "com.android.support:support-v4:${supportLibVersion}"
    resolutionStrategy.force "com.android.support:appcompat-v7:${supportLibVersion}"
    resolutionStrategy.force "com.android.support:design:${supportLibVersion}"
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // Support libs
    compile "com.android.support:support-annotations:${supportLibVersion}"
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:customtabs:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:preference-v14:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"

    // Recyclerview fast scroller
    compile 'com.futuremind.recyclerfastscroll:fastscroll:0.2.4'

    // OKHttp
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.5.0'

    // Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0-RC2'

    // Glide
    compile 'com.github.bumptech.glide:glide:4.0.0-SNAPSHOT'

    // Flow layout for tags
    compile 'com.wefika:flowlayout:0.4.0'

    // RX
    compile 'io.reactivex.rxjava2:rxandroid:2.0.0-RC1'
    compile 'io.reactivex.rxjava2:rxjava:2.0.0-RC2'

    // Gson
    compile 'com.google.code.gson:gson:2.7'

    //Dagger
    apt 'com.google.dagger:dagger-compiler:2.2'
    compile 'com.google.dagger:dagger:2.2'
    provided 'javax.annotation:jsr250-api:1.0'

    //Butterknife
    compile 'com.jakewharton:butterknife:8.0.1'
    apt 'com.jakewharton:butterknife-compiler:8.0.1'

    //Timber
    compile 'com.jakewharton.timber:timber:4.1.2'

    // jUnit
    testCompile 'junit:junit:4.12'
    // Mockito
    testCompile 'org.mockito:mockito-core:2.8.9'

    //Intrumentation tests (UI tests)
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2'

    //Resolve conflicts with depdencies
    androidTestCompile "com.android.support:support-annotations:${supportLibVersion}"

    //Leakcanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    //License dialog
    compile 'de.psdev.licensesdialog:licensesdialog:1.8.1'
}